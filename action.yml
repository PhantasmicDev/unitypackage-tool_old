name: "UnityPackage Packer"
author: "@PhantasmicDev"
description: "Pack or unpack .unitypackage files without the Unity editor or Unity project folder."
branding:
  icon: "package"
  color: "white"
inputs:
  command:
    description: "Chose between the 'pack' or 'unpack' command."
    required: true
  package:
    description: "If packing, this is the package that will be generated, must end with '.unitypackage'. If unpacking this is the '.unitypackage' to extract."
    required: true
  pack-map:
    description: "Key value entries of files/directories to pack and it's target location within the package."
    required: false
  unpack-directory:
    description: "The location where the package content will be extracted to."
    required: false

runs:
  using: "composite"
  steps:    
    - name: Validate Inputs
      id: validate-inputs
      run: |
        pack_map="$(echo '${{ inputs.pack-map }}')"
        
        if echo "$pack_map" | jq '.' > /dev/null; then
          echo "pack-map=$pack_map" >> GITHUB_OUTPUT
        else
          echo "Error: The provided input 'pack-map' is invalid. Check for proper JSON format." >&2
          exit 1
        fi
        
        shopt -s nocasematch
        
        if [[ "${{ inputs.command }}" == "pack" ]]; then
          echo "command=pack" >> GITHUB_OUTPUT
        elif [[ "${{ inputs.command }}" == "unpack" ]]; then
          echo "command=unpack" >> GITHUB_OUTPUT
        else
          echo "Error: Command '"${{ inputs.command }}"' is not an valid command, use command 'pack' or 'unpack'." >&2
          exit 1
        fi        
      shell: bash
      
    - uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '3.1.x'
      
    - run: |
        # Install Unity Packer
        dotnet tool install --verbosity quiet --global unity-packer --version 2.1.3
        
        if [[ ${{ steps.validate-inputs.outputs.command }} == "pack" ]]; then
          sudo apt install jshon > /dev/null
          
          for key in $(echo '${{ steps.validate-inputs.pack-map }}' | jshon -k); do
            value=$(echo '${{ steps.validate-inputs.pack-map }}' | jshon -e "$key" -u)
            inputs+=" "$key" "$value""
          done
          
          unity-packer pack "${{ inputs.package }}"$inputs
        else
          unity-packer unpack "${{ inputs.package }}" "${{ inputs.unpack-directory }}"
        fi
      shell: bash
